<?php
// Call Net_LDAP_UtilTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "Net_LDAP_UtilTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once 'Net/LDAP/Util.php';

/**
 * Test class for Net_LDAP_Util.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-09 at 10:33:22.
 */
class Net_LDAP_UtilTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("Net_LDAP_UtilTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * Tests Ldap_explode_dn()
     */
    public function testLdap_explode_dn() {
        $dn = 'OU=Sales+CN=J. Smith,dc=example,dc=net';
        $expected_casefold_none = array(
            array('CN=J. Smith', 'OU=Sales'),
            'dc=example',
            'dc=net'
        );
        $expected_casefold_upper = array(
            array('CN=J. Smith', 'OU=Sales'),
            'DC=example',
            'DC=net'
        );
        $expected_casefold_lower = array(
            array('cn=J. Smith', 'ou=Sales'),
            'dc=example',
            'dc=net'
        );

        $expected_onlyvalues = array(
            array( 'J. Smith', 'Sales'),
            'example',
            'net'
        );
        $expected_reverse = array_reverse($expected_casefold_upper);


        $dn_exploded_cnone   = Net_LDAP_Util::ldap_explode_dn($dn, array('casefold' => 'none'));
        $this->assertEquals($expected_casefold_none,  $dn_exploded_cnone,   'Option casefold none failed');

        $dn_exploded_cupper  = Net_LDAP_Util::ldap_explode_dn($dn, array('casefold' => 'upper'));
        $this->assertEquals($expected_casefold_upper, $dn_exploded_cupper,  'Option casefold upper failed');

        $dn_exploded_clower  = Net_LDAP_Util::ldap_explode_dn($dn, array('casefold' => 'lower'));
        $this->assertEquals($expected_casefold_lower, $dn_exploded_clower,  'Option casefold lower failed');

        $dn_exploded_onlyval = Net_LDAP_Util::ldap_explode_dn($dn, array('onlyvalues' => true));
        $this->assertEquals($expected_onlyvalues,     $dn_exploded_onlyval, 'Option onlyval failed');

        $dn_exploded_reverse = Net_LDAP_Util::ldap_explode_dn($dn, array('reverse' => true));
        $this->assertEquals($expected_reverse,        $dn_exploded_reverse, 'Option reverse failed');
    }

    /**
     * @todo Implement testEscape_dn_value().
     */
    public function testEscape_dn_value() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testUnescape_dn_value().
     */
    public function testUnescape_dn_value() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * Tests if canonical_dn() works
     */
    public function testCanonical_dn() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testEscape_filter_value().
     */
    public function testEscape_filter_value() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testUnescape_filter_value().
     */
    public function testUnescape_filter_value() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testAsc2hex32().
     */
    public function testAsc2hex32() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * @todo Implement testHex2asc().
     */
    public function testHex2asc() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }

    /**
     * Tests split_rdn_multival()
     */
    public function testSplit_rdn_multival() {
        $rdn = 'OU=Sales+CN=J. Smith';
        $expected = array('OU=Sales', 'CN=J. Smith');

        $split = Net_LDAP_Util::split_rdn_multival($rdn);
        $this->assertEquals($expected,  $split);
    }

    /**
     * @todo Implement testSplit_attribute_string().
     */
    public function testSplit_attribute_string() {
        // Remove the following line when you implement this test.
        $this->markTestIncomplete(
          "This test has not been implemented yet."
        );
    }
}

// Call Net_LDAP_UtilTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "Net_LDAP_UtilTest::main") {
    Net_LDAP_UtilTest::main();
}
?>
