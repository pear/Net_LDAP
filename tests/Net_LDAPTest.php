<?php
// Call Net_LDAPTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "Net_LDAPTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once 'Net/LDAP.php';
require_once 'Net/LDAP/Entry.php';

/**
 * Test class for Net_LDAP.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-09 at 10:32:36.
 */
class Net_LDAPTest extends PHPUnit_Framework_TestCase {
    /**
    * Stores the LDAP configuration
    */
    var $ldapcfg = false;

    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("Net_LDAPTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Load ldap config and adjust appropriately
     *
     * @access protected
     */
    protected function setUp() {
        $this->ldapcfg = Net_LDAPTest::getTestConfig();
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * This checks if a valid LDAP testconfig is present and loads it.
     *
     * If so, it is loaded and returned as array. If not, false is returned.
     * Some validation and 
     *
     * @access protected
     * @return false|array
     */
    public function getTestConfig() {
        $config = false;
        $file = dirname(__FILE__).'/ldapconfig.ini';
        if (file_exists($file) && is_readable($file)) {
            $config = parse_ini_file($file, true);
        }
        // validate ini
        $v_error = $file.' is probably invalid. Did you quoted values correctly?';
        $this->assertTrue(array_key_exists('global', $config));
        $this->assertTrue(array_key_exists('test', $config));
        $this->assertEquals(7, count($config['global']));
        $this->assertEquals(8, count($config['test']));

        // reformat things a bit, for convinience
        $config['global']['server_binddn'] =
            $config['global']['server_binddn'].','.$config['global']['server_base_dn'];
        $config['test']['existing_attrmv'] = explode('|', $config['test']['existing_attrmv']);
        return $config;
    }

    /**
    * Establishes a working connection
    *
    * @return Net_LDAP
    */
    public function &connect() {
        // Simple working connect and privilegued bind
        $lcfg = array(
                'host'   => $this->ldapcfg['global']['server_address'],
                'port'   => $this->ldapcfg['global']['server_port'],
                'basedn' => $this->ldapcfg['global']['server_base_dn'],
                'binddn' => $this->ldapcfg['global']['server_binddn'],
                'bindpw' => $this->ldapcfg['global']['server_bindpw'],
            );
        $ldap = Net_LDAP::connect($lcfg);
        $this->assertType('Net_LDAP', $ldap, 'Connect failed but was supposed to work. Check credentials and host address. If those are correct, file a bug!');
        return $ldap;
    }

/* ---------- TESTS ---------- */

    /**
     * Tests if getVersion() works correctly
     */
    public function testGetVersion() {
            $this->assertTrue(defined('NET_LDAP_VERSION'));
            $this->assertEquals(NET_LDAP_VERSION, Net_LDAP::getVersion());
    }

    /**
     * Tests if the server can connect and bind correctly
     */
    public function testConnectAndPrivileguedBind() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            // This connect is supposed to fail
            $lcfg = array(
                    'host' => 'pear.net-ldap.test.hostunknown.cno',
                );
            $ldap = Net_LDAP::connect($lcfg);
            $this->assertType('Net_LDAP_Error', $ldap, 'Connect succeeded but was supposed to fail!');

            // Failing with multiple hosts
            $lcfg = array(
                    'host' => array('pear.net-ldap.test.hostunknown1.cno', 'pear.net-ldap.test.hostunknown2.cno'),
                );
            $ldap = Net_LDAP::connect($lcfg);
            $this->assertType('Net_LDAP_Error', $ldap, 'Connect succeeded but was supposed to fail!');

            // Simple working connect and privilegued bind
            $ldap =& $this->connect();

            // Working connect and privilegued bind with first host down
            $lcfg = array(
                    'host'   => array(
                            'pear.net-ldap.test.hostunknown1.cno',
                            $this->ldapcfg['global']['server_address']
                        ),
                    'port'   => $this->ldapcfg['global']['server_port'],
                    'binddn' => $this->ldapcfg['global']['server_binddn'],
                    'bindpw' => $this->ldapcfg['global']['server_bindpw'],
                );
            $ldap = Net_LDAP::connect($lcfg);
            $this->assertType('Net_LDAP', $ldap, 'Connect failed but was supposed to work. Check credentials and host address. If those are correct, file a bug!');
        }
    }

    /**
     * Tests if the server can connect and bind anonymously, if supported (->cfg and ldap mode)
     */
    public function testConnectAndAnonymousBind() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } elseif ($this->ldapcfg['global']['server_cap_anonymous'] == true) {
            // Simple working connect and anonymous bind
            $lcfg = array(
                    'host'   => $this->ldapcfg['global']['server_address'],
                    'port'   => $this->ldapcfg['global']['server_port'],
                );
            $ldap = Net_LDAP::connect($lcfg);
            $this->assertType('Net_LDAP', $ldap, 'Connect failed but was supposed to work. Check address and if server supports anonymous bind. If those are correct, file a bug!');
        } else {
            $this->markTestSkipped('Server does not support anonymous bind (see ldapconfig.ini). Skipping test.');
        }
    }

    /**
     * testStartTLS() if server supports it
     */
    public function testStartTLS() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } elseif ($this->ldapcfg['global']['server_cap_tls'] == true) {
            // Simple working connect and privilegued bind
            $lcfg = array(
                    'host'     => $this->ldapcfg['global']['server_address'],
                    'port'     => $this->ldapcfg['global']['server_port'],
                    'binddn'   => $this->ldapcfg['global']['server_binddn'].','.$this->ldapcfg['global']['server_binddn'],
                    'bindpw'   => $this->ldapcfg['global']['server_bindpw'],
                    'starttls' => true
                );
            $ldap = Net_LDAP::connect();
            $this->assertType('Net_LDAP', $ldap, 'Connect failed but was supposed to work. Check credentials and host address. If those are correct, file a bug!');
        } else {
             $this->markTestSkipped('Server does not support TLS (see ldapconfig.ini). Skipping test.');
        }
    }

    /**
     * Test if adding and deleting a fresh entry works
     */
    public function testAdd() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $ldap =& $this->connect();

            // Adding a fresh entry
            $cn          = 'Net-LDAP-TestEntry';
            $dn          = 'cn='.$cn.','.$this->ldapcfg['global']['server_base_dn'];
            $fresh_entry = Net_LDAP_Entry::createFresh($dn,
                array(
                    'objectClass' => array('top','person'),
                    'cn'          => $cn,
                    'sn'          => 'TestEntry'
                )
            );
            $this->assertType('Net_LDAP_Entry', $fresh_entry);
            $this->assertTrue($ldap->add($fresh_entry));

            // Deleting this Entry
            $this->assertTrue($ldap->delete($fresh_entry), 'Deletion of entry failed!');
        }
    }

    /**
     * testDelete().
     *
     * Basic deletion is tested in testAdd(), so here we just test if
     * advanced deletion tasks work properly.
     */
    public function testDelete() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $ldap =& $this->connect();
            // some parameter checks
            $this->assertType('Net_LDAP_Error', $ldap->delete(1234));
            $this->assertType('Net_LDAP_Error', $ldap->delete($ldap));

            // in order to test subtree deletion, we need some little tree
            // which we need to establish first
            $base   = $this->ldapcfg['global']['server_base_dn'];
            $testdn = 'ou=Net_LDAP_Test_subdelete,'.$base;

            $ou = Net_LDAP_Entry::createFresh($testdn,
                array(
                    'objectClass' => array('top','organizationalUnit'),
                    'ou' => 'Net_LDAP_Test_subdelete'
                ));
            $ou_1 = Net_LDAP_Entry::createFresh('ou=test1,'.$testdn,
                array(
                    'objectClass' => array('top','organizationalUnit'),
                    'ou' => 'test1'
                ));
            $ou_1_l1 = Net_LDAP_Entry::createFresh('l=subtest,ou=test1,'.$testdn,
                array(
                    'objectClass' => array('top','locality'),
                    'l' => 'test1'
                ));
            $ou_2 = Net_LDAP_Entry::createFresh('ou=test2,'.$testdn,
                array(
                    'objectClass' => array('top','organizationalUnit'),
                    'ou' => 'test2'
                ));
            $ou_3 = Net_LDAP_Entry::createFresh('ou=test3,'.$testdn,
                array(
                    'objectClass' => array('top','organizationalUnit'),
                    'ou' => 'test3'
                ));
            $this->assertTrue($ldap->add($ou));
            $this->assertTrue($ldap->add($ou_1));
            $this->assertTrue($ldap->add($ou_1_l1));
            $this->assertTrue($ldap->add($ou_2));
            $this->assertTrue($ldap->add($ou_3));
            $this->assertTrue($ldap->dnExists($ou->dn()));
            $this->assertTrue($ldap->dnExists($ou_1->dn()));
            $this->assertTrue($ldap->dnExists($ou_1_l1->dn()));
            $this->assertTrue($ldap->dnExists($ou_2->dn()));
            $this->assertTrue($ldap->dnExists($ou_3->dn()));
            // Tree established now. We can run some tests now :D

            // Try to delete some non existent entry inside that subtree (fails)
            $this->assertType('Net_LDAP_Error', $ldap->delete(
                'cn=not_existent,ou=test1,'.$testdn));

            // Try to delete main test ou without recursive set (fails too)
            $this->assertType('Net_LDAP_Error', $ldap->delete($testdn));

            // Retry with subtree delete, this should work
            $this->assertTrue($ldap->delete($testdn, true));

            // The DN is not allowed to exist anymore
            $this->assertFalse($ldap->dnExists($testdn));
        }
    }

    /**
     * testModify().
     */
    public function testModify() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $ldap =& $this->connect();
            // We need a test entry:
            $entry = Net_LDAP_Entry::createFresh(
                'ou=Net_LDAP_Test_modify,'.$this->ldapcfg['global']['server_base_dn'],
                array(
                    'objectClass' => array('top','organizationalUnit'),
                    'ou'              => 'Net_LDAP_Test_modify',
                    'street'          => 'Beniroad',
                    'telephoneNumber' => array('1234', '5678'),
                    'postalcode'      => '12345',
                    'postalAddress'   => 'someAddress',
                    'facsimileTelephoneNumber' => array('123','456')
                ));
            $this->assertTrue($ldap->add($entry));
            $this->assertTrue($ldap->dnExists($entry->dn()));

            // Refetch entry from directory for applying changes
            // (necessary because of Bug #13200)
            $local_entry = $ldap->getEntry($entry->dn(), array(
                'postalAddress', 'street', 'telephoneNumber', 'postalcode',
                'facsimileTelephoneNumber', 'l', 'businessCategory'
            ));

            // Prepare some changes
            $changes = array(
                'add' => array(
                                'businessCategory' => array('foocat', 'barcat'),
                                'description' => 'testval'
                ),
                'delete' => array('postalAddress'),
                'replace' => array('telephoneNumber' => array('345', '567')),
                'changes' => array(
                                'replace' => array('street' => 'Highway to Hell'),
                                'add' => array('l' => 'someLocality'),
                                'delete' => array(
                                    'postalcode',
                                    'facsimileTelephoneNumber' => array('123'))
                )
            );

            // run them
            $this->assertTrue($ldap->modify($local_entry, $changes));

            // verify correct attribute changes
            $actual_entry = $ldap->getEntry($entry->dn(), array(
                'postalAddress', 'street', 'telephoneNumber', 'postalcode',
                'facsimileTelephoneNumber', 'l', 'businessCategory', 'description'));
            $this->assertType('Net_LDAP_Entry', $actual_entry);
            $expected_attributes = array(
                'street' => 'Highway to Hell',
                'l'      => 'someLocality',
                'telephoneNumber' => array('345', '567'),
                'businessCategory' => array('foocat', 'barcat'),
                'description' => 'testval',
                'facsimileTelephoneNumber' => '456'
            );

            $local_attributes  = $local_entry->getValues();
            $actual_attributes = $actual_entry->getValues();

            // to enable easy check, we need to sort the
            // values of the remaining multival attrs
            sort($expected_attributes['businessCategory']);
            sort($local_attributes['businessCategory']);
            sort($actual_attributes['businessCategory']);

            // cleanup directory prior tests
            $this->assertTrue($ldap->delete($actual_entry),
                'Cleanup of test entry failed. Please remove manually: '.$entry->dn());

            // The attributes must match the expected values.
            // Both, the entry inside the directory and our
            // apps local copy must reflect the same values
            $this->assertEquals($expected_attributes, $actual_attributes, 'The directory entries attributes are not OK!');
            $this->assertEquals($expected_attributes, $local_attributes, 'The local entries attributes are not OK!');
        }
    }

    /**
     * @todo Implement testSearch().
     */
    public function testSearch() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testSetOption().
     */
    public function testSetOption() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testGetOption().
     */
    public function testGetOption() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testGetLDAPVersion().
     */
    public function testGetLDAPVersion() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testSetLDAPVersion().
     */
    public function testSetLDAPVersion() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testDnExists().
     */
    public function testDnExists() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testGetEntry().
     */
    public function testGetEntry() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testMove().
     */
    public function testMove() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testCopy().
     */
    public function testCopy() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testErrorMessage().
     */
    public function testErrorMessage() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testIsError().
     */
    public function testIsError() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testRootDse().
     */
    public function testRootDse() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testRoot_dse().
     */
    public function testRoot_dse() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testSchema().
     */
    public function testSchema() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testCheckLDAPExtension().
     */
    public function testCheckLDAPExtension() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo testUtf8Encode()
     */
    public function testUtf8Encode() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testUtf8Decode().
     */
    public function testUtf8Decode() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }

    /**
     * @todo Implement testGetLink().
     */
    public function testGetLink() {
        if (!$this->ldapcfg) {
            $this->markTestSkipped('No ldapconfig.ini found. Skipping test!');
        } else {
            $this->markTestIncomplete("This test has not been implemented yet.");
        }
    }
}

// Call Net_LDAPTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "Net_LDAPTest::main") {
    Net_LDAPTest::main();
}
?>